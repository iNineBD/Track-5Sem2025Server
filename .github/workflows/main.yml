name: Build, Test, SonarAnalysis and Deploy

on:
  push:
    branches: ["**"] # Executa em qualquer push
  pull_request:
    branches: ["**"] # Executa em qualquer PR

jobs:
  lint-and-build:
    name: GolangCI-Lint and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0       

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.1'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: src
        run: |
          if [ ! -f go.sum ]; then
            go mod tidy
          fi
          go mod download

      - name: Install GolangCI-Lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.8
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Format code with gofmt
        working-directory: src
        run: go fmt ./...

      - name: Ensure Go Modules
        working-directory: src
        run: go mod tidy -v

      - name: Run GolangCI-Lint
        working-directory: src
        run: golangci-lint run ./...

      - name: Build application
        working-directory: src
        run: go build -v ./...

  unit-tests:
    name: Unit Tests and Coverage
    runs-on: ubuntu-latest
    needs: lint-and-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.1'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        working-directory: src
        run: |
          if [ ! -f go.sum ]; then
            go mod tidy
          fi
          go mod download

      - name: Create .env file
        working-directory: src
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > ../.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ../.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ../.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> ../.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> ../.env
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> ../.env

      - name: Create .env file in service
        working-directory: src/pkg/service
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> .env

      - name: Verify .env file (debug)
        working-directory: src
        run: |
          ls -la ../
          cat ../.env

      - name: Run tests with coverage and generate reports
        working-directory: src
        run: |
          EXCLUDE_DIRS="dto models docs"
          PACKAGES=$(go list ./... | grep -Ev "$(echo $EXCLUDE_DIRS | sed 's/ /|/g')")
          go test $PACKAGES \
            -coverprofile=coverage.out \
            -covermode=atomic \
            -coverpkg=./... \
            -tags=integration \
            -vet=off

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: src/coverage.out

  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.1'

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: src

      - name: SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=iNineBD_Track-5Sem2025Server
            -Dsonar.organization=ininetrack
            -Dsonar.projectName=Track-5Sem2025Server
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=src
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.exclusions=**/*_test.go,**/models/**,**/dto/**,**/docs/**
            -Dsonar.coverage.exclusions=**/*_test.go,**/models/**,**/dto/**,**/docs/**
            -Dsonar.go.coverage.reportPaths=src/coverage.out
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.verbose=true

  sonarqube-selfhosted:
    name: SonarQube Self-hosted Analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.1'

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: src

      - name: SonarQube Analysis (Docker Remote)
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR2_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Track-5Sem2025Server
            -Dsonar.sources=src
            -Dsonar.host.url=http://144.22.212.19:9001
            -Dsonar.login=${{ secrets.SONAR2_TOKEN }}
            -Dsonar.go.coverage.reportPaths=src/coverage.out
            -Dsonar.verbose=true